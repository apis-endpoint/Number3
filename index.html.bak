<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Session Manager Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    :root {
      --primary: #007bff;
      --danger: #dc3545;
      --success: #28a745;
      --dark: #1e1e2f;
      --light: #f5f7fa;
      --white: #ffffff;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(to right, #0f2027, #203a43, #2c5364);
      color: var(--white);
      padding: 20px;
    }

    .container {
      max-width: 1200px;
      margin: auto;
      padding: 20px;
    }

    h1 {
      text-align: center;
      margin-bottom: 30px;
      font-size: 2.5em;
      color: var(--white);
    }

    .stats {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      margin-bottom: 40px;
      flex-wrap: wrap;
    }

    .stat-card {
      flex: 1 1 30%;
      background: var(--white);
      color: var(--dark);
      border-radius: 12px;
      padding: 25px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.2);
      transition: transform 0.2s ease;
    }

    .stat-card:hover {
      transform: translateY(-5px);
    }

    .stat-card h3 {
      font-size: 2.5em;
      margin-bottom: 5px;
    }

    .stat-card p {
      font-size: 1.2em;
      color: var(--dark);
    }

    .total { border-left: 6px solid var(--primary); }
    .recent { border-left: 6px solid var(--danger); }
    .valid { border-left: 6px solid var(--success); }

    .controls {
      margin-bottom: 30px;
    }

    input[type="file"], .btn {
      padding: 12px;
      font-size: 16px;
      margin-right: 10px;
      border: none;
      border-radius: 6px;
    }

    .btn {
      background: var(--primary);
      color: white;
      cursor: pointer;
    }

    .btn:hover {
      background: #0056b3;
    }

    .file-item {
      background: var(--white);
      color: var(--dark);
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .file-actions {
      margin-top: 10px;
    }

    .file-actions a, .file-actions button {
      margin-right: 10px;
      padding: 8px 12px;
      font-size: 14px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
    }

    .file-actions a {
      background: var(--primary);
      color: white;
      text-decoration: none;
    }

    .file-actions .delete {
      background: var(--danger);
      color: white;
    }

    .file-actions .rename {
      background: var(--success);
      color: white;
    }

    .file-actions input {
      padding: 8px;
      margin-left: 10px;
      border-radius: 4px;
      border: 1px solid #ccc;
      width: 200px;
    }
  </style>
</head>
<body>

<div class="container">
  <h1>Session Manager Dashboard</h1>

  <div class="controls">
    <input type="file" id="fileInput">
    <button class="btn" onclick="uploadFile()">Upload</button>
  </div>

  <div class="stats">
    <div class="stat-card total">
      <p>Total Sessions</p>
      <h3 id="totalCreds">0</h3>
    </div>
    <div class="stat-card recent">
      <p>Recent Sessions (24h)</p>
      <h3 id="recentCreds">0</h3>
    </div>
    <div class="stat-card valid">
      <p>Valid Sessions</p>
      <h3 id="validCreds">0</h3>
    </div>
  </div>

  <h2 style="margin-bottom: 15px;">Session Files</h2>
  <div id="fileList"></div>
</div>

<script>
const apiBase = location.origin;

function uploadFile() {
  const fileInput = document.getElementById('fileInput');
  if (!fileInput.files.length) return alert('Please select a file.');

  const formData = new FormData();
  formData.append('file', fileInput.files[0]);

  fetch(`${apiBase}/api/upload`, {
    method: 'POST',
    body: formData
  })
  .then(res => res.json())
  .then(() => {
    alert('File uploaded.');
    fileInput.value = '';
    loadFiles();
  });
}

function loadFiles() {
  fetch(`${apiBase}/api/files`)
    .then(res => res.json())
    .then(data => {
      document.getElementById('totalCreds').textContent = data.files.length;
      document.getElementById('recentCreds').textContent = Math.floor(Math.random() * data.files.length);
      document.getElementById('validCreds').textContent = Math.floor(Math.random() * data.files.length);

      const list = document.getElementById('fileList');
      list.innerHTML = '';
      data.files.forEach(file => {
        const div = document.createElement('div');
        div.className = 'file-item';
        div.innerHTML = `
          <strong>${file}</strong>
          <div class="file-actions">
            <a href="${apiBase}/files/${file}" target="_blank">Download</a>
            <button class="delete" onclick="deleteFile('${file}')">Delete</button>
            <input placeholder="New name">
            <button class="rename" onclick="renameFile('${file}', this)">Rename</button>
          </div>
        `;
        list.appendChild(div);
      });
    });
}

function deleteFile(filename) {
  if (!confirm('Are you sure you want to delete this file?')) return;
  fetch(`${apiBase}/api/files/${filename}`, {
    method: 'DELETE'
  })
  .then(() => {
    alert('File deleted.');
    loadFiles();
  });
}

function renameFile(filename, btn) {
  const newName = btn.previousElementSibling.value.trim();
  if (!newName) return alert('Enter a new name.');
  fetch(`${apiBase}/api/files/${filename}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ newName })
  })
  .then(() => {
    alert('Renamed.');
    loadFiles();
  });
}

loadFiles();
</script>

</body>
</html>